/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package PoolGame;

import java.io.IOException;
import java.util.List;

import PoolGame.Command.*;
import PoolGame.ControlPane.ControlPane;
import javafx.animation.KeyFrame;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.util.Duration;
import org.json.simple.parser.ParseException;

import PoolGame.ConfigReader.ConfigKeyMissingException;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.stage.Stage;

/** The JavaFX application */
public class App extends Application {

    public static final double FRAMETIME = 1.0 / 60.0;

    private LevelCommand[] levelCommands;

    /** store the primary stage */
    private Stage stage;

    /** Share the common timeline object */
    private Timeline timeline;

    private ConfigReader loadConfig(List<String> args) {
        String configPath;
        boolean isResourcesDir = false;
		if (args.size() > 0) {
			configPath = args.get(0);
		} else {
			// configPath = "src/main/resources/config.json";
			configPath = "/config.json";
            isResourcesDir = true;
		}
        return readConfig(configPath, isResourcesDir);
    }

    /** Separate from loadConfig to load directly */
    private ConfigReader readConfig(String configPath, boolean isResourcesDir) {
        // parse the file:
        ConfigReader config = null;
        try {
            config = new ConfigReader(configPath, isResourcesDir);
        } catch (IOException | ParseException | ConfigKeyMissingException | IllegalArgumentException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        }
        return config;
    }

    @Override
    public void start(Stage stage) {
        // the primary stage
        this.stage = stage;

        this.levelCommands = new LevelCommand[4];
        ConfigReader defaultConfig = loadConfig(getParameters().getRaw());
        this.levelCommands[0] = new DefaultLevelCommand(this, defaultConfig);
        this.levelCommands[1] = new EasyLevelCommand(this, readConfig("/config_easy.json", true));
        this.levelCommands[2] = new NormalLevelCommand(this, readConfig("/config_normal.json", true));
        this.levelCommands[3] = new HardLevelCommand(this, readConfig("/config_hard.json", true));

        stage.setTitle("PoolGame");
        stage.setResizable(false);

        this.timeline = new Timeline();
        this.timeline.setCycleCount(Timeline.INDEFINITE);


        this.levelCommands[0].execute();

        stage.show();

    }

    public void alterGame(ConfigReader configReader) {

        // Initialize game first, to get table size
        Game game = new Game(configReader);
        ControlPane controlPane = new ControlPane(game.getWindowDimX(), 0);

        Group root = new Group();
        // Set size of the scene
        Scene scene = new Scene(root, game.getWindowDimX()+200, game.getWindowDimY());

        this.stage.setScene(scene);

        Canvas canvas = new Canvas(game.getWindowDimX(), game.getWindowDimY());

        /*
         * I can't understand the usage of magic number 4 here.
         * Maybe we should use the size of scene instead of stage.
         * It seems that the size of stage includes decorations.
         * https://stackoverflow.com/questions/40095830/why-is-my-javafx-window-not-the-right-width
         */
        // stage.setWidth(game.getWindowDimX());
        // stage.setHeight(game.getWindowDimY() +
        //                 Pocket.RADIUS +
        //                 PoolTable.POCKET_OFFSET +
        //                 4); // Magic number to get bottom to align

        // Set the size of stage using the size of scene
        this.stage.sizeToScene();

        root.getChildren().add(canvas);
        // GraphicsContext gc = canvas.getGraphicsContext2D();
        game.addDrawables(root);

        // Set commands
        controlPane.getLevelChangePane().setAndRegisterLevelCommands(this.levelCommands, scene);
        // Display control pane
        controlPane.addToGroup(root.getChildren());

        KeyFrame frame = new KeyFrame(Duration.seconds(App.FRAMETIME), (actionEvent) -> game.tick());

        this.timeline.getKeyFrames().clear();
        this.timeline.getKeyFrames().add(frame);
        this.timeline.playFromStart();

    }

    /**
     * The entry point of the program
     * @param args CLI arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
}
